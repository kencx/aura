#!/usr/bin/env bash

# aura is an aurutils wrapper for managing a custom Arch repository.
# It should be run with the custom repository's user.

set -euo pipefail

DB="custom"
REPO_DIR="/var/cache/pacman/$DB"
IGNORE_FILE="$HOME/.config/aurutils/sync/ignore"
XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
AURDEST=${AURDEST:-$XDG_CACHE_HOME/aurutils/sync}

S3_CONFIG_DIR="/home/kenc/.mcli"
S3_CMD="mcli --config-dir=$S3_CONFIG_DIR --no-color --quiet"
S3_ALIAS="minio"
BUCKET="$S3_ALIAS/aur"

if [[ "$EUID" == 0 ]]; then
    echo "Please do not run aura as root"
    exit 1
fi

DEPENDENCIES=(aur mcli paccache)
for i in "${DEPENDENCIES[@]}"; do
    if ! command -v "$i" >/dev/null 2>&1; then
        echo -e "ERROR: \"$i\" not installed!"
        exit 1
    fi
done

if $S3_CMD alias ls --no-color --quiet "$S3_ALIAS" 2>&1 | grep -q "ERROR"; then
    echo "ERROR: S3 alias \"$S3_ALIAS\" not set up"
    exit 1
fi

if ! $S3_CMD ready --no-color --quiet "$S3_ALIAS" 2>&1 | grep -q "The cluster '$S3_ALIAS' is ready"; then
    echo "ERROR: S3 endpoint not ready"
    exit 1
fi

if $S3_CMD ls --no-color --quiet --summarize "$BUCKET" 2>&1 | grep -q "ERROR"; then
    echo "ERROR: Bucket \"$BUCKET\" does not exist"
    exit 1
fi

die() {
    echo "$@"
    help
    exit 1
}

help() {
    cat <<EOF
usage: $(basename $0) [subcommand] [args]

aura is an aurutils wrapper for managing a custom Arch repository.
It should be run with the custom repository's user.

  Subcommand:
    help        Print help
    add         Add package to DB from AUR
    check       Check for package updates
    clean       Sync all and remove old packages
    ignore      Add package to ignore list
    unignore    Remove package from ignore list
    list, ls    List all packages in DB
    list-deps   List all packages in DB with dependencies
    remove, rm  Remove package from DB
    search      Search for AUR packages
    sync        Sync/update all packages
    gc          Remove unused cached files
    update      Update a package
EOF
}

aur_sync() {
    sudo pacsync "$DB" >/dev/null
}

init_ignore_file() {
    if [[ ! -d $(dirname "$IGNORE_FILE") ]]; then
        mkdir -p "$(dirname "$IGNORE_FILE")"
    fi

    if [[ ! -f "$IGNORE_FILE" ]]; then
        touch "$IGNORE_FILE"
    fi
}

add_ignore() {
    IFS=$'\n'
    for line in $1; do
        item=$(awk '{print $1}' <<<"$line")
        if grep -q "$item" "$IGNORE_FILE"; then
            line="$line"$'\t[I]'
        fi
        printf "%s\n" "$line"
    done
}

remove_ignore() {
    IFS=$'\n'
    for pkg in "$@"; do
        file=$(grep -v "$pkg" "$IGNORE_FILE")
        echo "$file" >"$IGNORE_FILE"
    done
}

subcommand=${1:-}

case $subcommand in
"list" | "ls")
    aur_sync
    # consider replacing with
    # aur repo-parse -p "$REPO_DIR/$DB.db.tar.xz" --list
    add_ignore "$(aur repo --database "$DB" --list -S)" | column --table
    ;;

"search")
    shift
    if [[ $# -lt 1 ]]; then
        die "ERROR: missing argument"
    fi

    selected=$(aur search --name "$@" --short | fzf | awk '{split($1, a, "/"); print a[2]}')
    aur sync \
        --no-view \
        --chroot \
        --pacman-conf=/etc/pacman-chroot.conf \
        --makepkg-conf=/etc/makepkg-chroot.conf \
        --database "$DB" \
        --root "$REPO_DIR" "$selected"
    $S3_CMD mirror --overwrite "$REPO_DIR" "$BUCKET"
    aur_sync
    ;;

"add" | "update")
    shift
    if [[ $# -lt 1 ]]; then
        die "ERROR: missing argument"
    fi

    aur sync \
        --no-view \
        --no-confirm \
        --chroot \
        --pacman-conf=/etc/pacman-chroot.conf \
        --makepkg-conf=/etc/makepkg-chroot.conf \
        --database "$DB" \
        --root "$REPO_DIR" "$@"
    $S3_CMD mirror --overwrite "$REPO_DIR" "$BUCKET"
    aur_sync
    ;;

"remove" | "rm")
    shift
    repo-remove "$REPO_DIR/$DB.db.tar.xz" "$@"

    for pkg in "$@"; do
        find "$REPO_DIR" -type f -name "$pkg*.pkg.*" -printf "removing %P\n" -delete
        $S3_CMD find --name "$pkg*.pkg.*" "$BUCKET" --exec "$S3_CMD rm {}"
    done

    remove_ignore "$@"
    aur_sync
    ;;

"sync")
    AUR_ASROOT=1 aur sync \
        --no-view \
        --no-confirm \
        --chroot \
        --pacman-conf=/etc/pacman-chroot.conf \
        --makepkg-conf=/etc/makepkg-chroot.conf \
        --database "$DB" \
        --root "$REPO_DIR" \
        --upgrades -k0 \
        --ignore-file="$IGNORE_FILE"
    $S3_CMD mirror --overwrite "$REPO_DIR" "$BUCKET"
    ;;

"clean")
    shift

    if [[ $# -eq 1 ]]; then
        case "$1" in
        "-s" | "--sync")
            AUR_ASROOT=1 aur sync \
                --no-view \
                --no-confirm \
                --chroot \
                --pacman-conf=/etc/pacman-chroot.conf \
                --makepkg-conf=/etc/makepkg-chroot.conf \
                --database "$DB" \
                --root "$REPO_DIR" \
                --upgrades -k0 \
                --ignore-file="$IGNORE_FILE"
            ;;
        *)
            die "ERROR: invalid argument"
            ;;
        esac
    fi

    sudo paccache -rvk2 -c "$REPO_DIR"
    $S3_CMD mirror --overwrite --remove "$REPO_DIR" "$BUCKET"
    ;;

"check")
    add_ignore "$(aur repo --database "$DB" --upgrades -S)" | column --table
    ;;

"ignore")
    shift
    if [[ $# -lt 1 ]]; then
        die "ERROR: missing argument"
    fi
    init_ignore_file

    for i in "$@"; do
        echo "custom/$i" >>"$IGNORE_FILE"
        res=$(sort <"$IGNORE_FILE" | uniq)
        echo "$res" >"$IGNORE_FILE"
    done
    ;;

"unignore")
    shift
    if [[ $# -lt 1 ]]; then
        die "ERROR: missing argument"
    fi

    init_ignore_file
    remove_ignore "$@"
    ;;

"gc")
    shift
    find "$AURDEST" -name .git -execdir git clean -xdf \;

    cached=$(find "$AURDEST" -name .git | rev | cut -d'/' -f2 | rev | sort)
    db=$(aur repo --database $DB --list -S | cut -d$'\t' -f1 | sort)
    diff=$(comm -13 <(echo "$db") <(echo "$cached"))

    for f in $diff; do
        rm -rf "${AURDEST:?}/${f:?}"
        echo "Removed $AURDEST/$f"
    done
    ;;

"list-deps")
    shift
    aur_sync
    aur repo-parse -p "$REPO_DIR/$DB.db.tar.xz" --table | column --table
    ;;

"" | *)
    help
    exit 1
    ;;
esac
